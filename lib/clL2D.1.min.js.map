{"version":3,"sources":["webpack:///./src/_cLive2DApp.js"],"names":["_configMgr","__webpack_require__","console","log","config"],"mappings":";iHA0CA,IAAAA,EAAAC,EAAA,cAEe,WACbC,QAAQC,IAAI,WACZD,QAAQC,IAARH,EAAAI","file":"clL2D.1.min.js","sourcesContent":["/*import {\n  UtSystem,\n  UtDebug,\n  LDTransform,\n  LDGL,\n  Live2D,\n  Live2DModelWebGL,\n  Live2DModelJS,\n  Live2DMotion,\n  MotionQueueManager,\n  PhysicsHair,\n  AMotion,\n  PartsDataID,\n  DrawDataID,\n  BaseDataID,\n  ParamID\n} from './lib/live2d.min';*//*\nimport './lib/live2d.min.js';\nimport { createCanvas, initCanvas } from \"./lib/canvasManager\";\nimport { device } from 'current-device';\nimport { L2DTargetPoint, L2DViewMatrix, L2DMatrix44 } from \"./lib/Live2DFramework\";\nimport cManager from \"./cManager\";\nimport { MatrixStack } from \"./utils/MatrixStack\";\nimport { setContext } from \"./lib/webGLContext\";\nimport { cDefine } from \"./cDefine\";\n\nconst live2DMgr = new cManager();\nlet isDrawStart = false;\nlet gl = null;\nlet canvas = null;\nlet dragMgr = null;\nlet viewMatrix = null;\nlet projMatrix = null;\nlet deviceToScreen = null;\nlet drag = false;\nlet lastMouseX = 0;\nlet lastMouseY = 0;\nlet headPos = 0.5;\nlet opacityDefault = 0.7;\nlet opacityHover = 1;\n*/\n\nimport { config }from './config/configMgr.js';\n\nexport default () => {\n  console.log('config:');\n  console.log(config);\n/*\n    headPos = typeof iHeadPos === 'undefined' ? 0.5 : iHeadPos;\n    opacityDefault = typeof iOpacityDefault === 'undefined' ? 0.7 : iOpacityDefault;\n    opacityHover = typeof iOpacityHover === 'undefined' ? 1 : iOpacityHover;\n    initSettings();\n    createCanvas(iID);\n    initCanvas(iID);\n    init(iModelUrl);*/\n}\n\n\nfunction init(modelUrl) {\n  // 此处获取的是canvas的大小 即绘制大小，与实际显示大小无关\n  let width = canvas.width;\n  let height = canvas.height;\n  // 以下为实际显示大小\n  // #32\n  let sWidth = parseInt(canvas.style.width);\n  let sHeight = parseInt(canvas.style.height);\n\n  dragMgr = new L2DTargetPoint();\n  let ratio = height / width;\n  let left = cDefine.VIEW_LOGICAL_LEFT;\n  let right = cDefine.VIEW_LOGICAL_RIGHT;\n  let bottom = -ratio;\n  let top = ratio;\n\n  viewMatrix = new L2DViewMatrix();\n\n  viewMatrix.setScreenRect(left, right, bottom, top);\n\n  viewMatrix.setMaxScreenRect(cDefine.VIEW_LOGICAL_MAX_LEFT,\n    cDefine.VIEW_LOGICAL_MAX_RIGHT,\n    cDefine.VIEW_LOGICAL_MAX_BOTTOM,\n    cDefine.VIEW_LOGICAL_MAX_TOP);\n\n  projMatrix = new L2DMatrix44();\n  projMatrix.multScale(1, (width / height));\n\n  deviceToScreen = new L2DMatrix44();\n  // deviceToScreen.multTranslate(-width / 2.0, -height / 2.0); // old codes\n  // deviceToScreen.multScale(2 / width, -2 / width); // old codes\n  deviceToScreen.multTranslate(-sWidth / 2.0, -sHeight / 2.0);  // #32\n  deviceToScreen.multScale(2 / sWidth, -2 / sHeight);  // #32\n\n  gl = getWebGLContext();\n  setContext(gl);\n  if (!gl) { // Check if WebGL element is created successfully.\n    console.error(\"Failed to create WebGL context.\");\n    if(!window.WebGLRenderingContext){\n      console.error(\"Your browser don't support WebGL, check https://get.webgl.org/ for futher information.\");\n    }\n    return;\n  }\n  window.Live2D.setGL(gl);\n  gl.clearColor(0.0, 0.0, 0.0, 0.0);\n  changeModel(modelUrl);\n  startDraw();\n}\n\nfunction startDraw() {\n  if (!isDrawStart) {\n    isDrawStart = true;\n    (function tick() {\n      draw();\n      let requestAnimationFrame =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.msRequestAnimationFrame;\n\n      requestAnimationFrame(tick, canvas);\n    })();\n  }\n}\n\nfunction draw()\n{\n    MatrixStack.reset();\n    MatrixStack.loadIdentity();\n    dragMgr.update();\n    live2DMgr.setDrag(dragMgr.getX(), dragMgr.getY());\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    MatrixStack.multMatrix(projMatrix.getArray());\n    MatrixStack.multMatrix(viewMatrix.getArray());\n    MatrixStack.push();\n\n    for (let i = 0; i < live2DMgr.numModels(); i++)\n    {\n        let model = live2DMgr.getModel(i);\n\n        if(model == null) return;\n\n        if (model.initialized && !model.updating)\n        {\n            model.update();\n            model.draw(gl);\n        }\n    }\n    MatrixStack.pop();\n}\n\nfunction changeModel(modelurl) // 更换模型\n{\n    live2DMgr.reloadFlg = true;\n    live2DMgr.count++; // 现在仍有多模型支持，稍后可以精简\n    live2DMgr.changeModel(gl, modelurl);\n}\n\nfunction modelScaling(scale) {\n  viewMatrix.adjustScale(0, 0, scale);\n}\n/*\nfunction transformRange(center, transform, range)\n{\n    let a = {\n        x: transform.x - center.x,\n        y: transform.y - center.y\n    }\n    let r = Math.sqrt(Math.pow(a.x,2) + Math.pow(a.y,2));\n    if (r > range) {\n        a = {\n            x: a.x / r * range + center.x,\n            y: a.y / r * range + center.y\n        };\n        return a;\n    } else {\n        return transform;\n    }\n}\n*/\nfunction dot(A,B)\n{\n    return A.x * B.x + A.y * B.y;\n}\n\nfunction normalize(x,y)\n{\n    let length = Math.sqrt(x * x + y * y)\n    return {\n        x: x / length,\n        y: y / length\n    }\n}\n\nfunction transformRect(center, transform, rect)\n{\n    if (transform.x < rect.left + rect.width && transform.y < rect.top + rect.height &&\n        transform.x > rect.left && transform.y > rect.top) return transform;\n    let Len_X = center.x - transform.x;\n    let Len_Y = center.y - transform.y;\n\n    function angle(Len_X, Len_Y)\n    {\n        return Math.acos(dot({\n            x: 0,\n            y: 1\n        }, normalize(Len_X, Len_Y))) * 180 / Math.PI\n    }\n\n    let angleTarget = angle(Len_X, Len_Y);\n    if (transform.x < center.x) angleTarget = 360 - angleTarget;\n    let angleLeftTop = 360 - angle(rect.left - center.x, (rect.top - center.y) * -1);\n    let angleLeftBottom = 360 - angle(rect.left - center.x, (rect.top + rect.height - center.y) * -1);\n    let angleRightTop = angle(rect.left + rect.width - center.x, (rect.top - center.y) * -1);\n    let angleRightBottom = angle(rect.left + rect.width - center.x, (rect.top + rect.height - center.y) * -1);\n    let scale = Len_Y / Len_X;\n    let res = {};\n\n    if (angleTarget < angleRightTop) {\n        let y3 = rect.top - center.y;\n        let x3 = y3 / scale;\n        res = {\n            y: center.y + y3,\n            x: center.x + x3\n        }\n    } else if(angleTarget < angleRightBottom) {\n        let x3 = rect.left + rect.width - center.x;\n        let y3 = x3 * scale;\n        res = {\n            y: center.y + y3,\n            x: center.x + x3\n        }\n    } else if (angleTarget < angleLeftBottom) {\n        let y3 = rect.top + rect.height - center.y;\n        let x3 = y3 / scale;\n        res = {\n            y: center.y + y3,\n            x: center.x + x3\n        }\n    } else if (angleTarget < angleLeftTop) {\n        let x3 = center.x - rect.left;\n        let y3 = x3 * scale;\n        res = {\n            y: center.y - y3,\n            x: center.x - x3\n        }\n    } else {\n        let y3 = rect.top - center.y;\n        let x3 = y3 / scale;\n        res = {\n            y: center.y + y3,\n            x: center.x + x3\n        }\n    }\n\n    return res;\n}\n\nfunction modelTurnHead(event)\n{\n    drag = true;\n\n    let rect = canvas.getBoundingClientRect();\n\n    let sx = transformScreenX(event.clientX - rect.left);\n    let sy = transformScreenY(event.clientY - rect.top);\n    let target = transformRect({\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height * headPos\n    }, {\n        x: event.clientX,\n        y: event.clientY\n    }, rect)\n    let vx = transformViewX(target.x - rect.left);\n    let vy = transformViewY(target.y - rect.top);\n\n    if (cDefine.DEBUG_MOUSE_LOG)\n        console.log(\"modelTurnHead onMouseMove device( x:\" + event.clientX + \" y:\" + event.clientY + \" ) view( x:\" + vx + \" y:\" + vy + \")\");\n\n    lastMouseX = sx;\n    lastMouseY = sy;\n\n    dragMgr.setPoint(vx, vy);\n}\n\nfunction modelTapEvent(event)\n{\n    drag = true;\n\n    let rect = canvas.getBoundingClientRect();\n\n    let sx = transformScreenX(event.clientX - rect.left);\n    let sy = transformScreenY(event.clientY - rect.top);\n    let target = transformRect({\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height * headPos\n    }, {\n        x: event.clientX,\n        y: event.clientY\n    }, rect)\n    let vx = transformViewX(target.x - rect.left);\n    let vy = transformViewY(target.y - rect.top);\n\n    if (cDefine.DEBUG_MOUSE_LOG)\n        console.log(\"modelTapEvent onMouseDown device( x:\" + event.clientX + \" y:\" + event.clientY + \" ) view( x:\" + vx + \" y:\" + vy + \")\");\n\n    lastMouseX = sx;\n    lastMouseY = sy;\n\n    live2DMgr.tapEvent(vx, vy);\n}\n\nfunction followPointer(event)\n{\n    let rect = canvas.getBoundingClientRect();\n\n    let sx = transformScreenX(event.clientX - rect.left);\n    let sy = transformScreenY(event.clientY - rect.top);\n\n    // log but seems ok\n    // console.log(\"ecx=\" + event.clientX + \" ecy=\" + event.clientY + \" sx=\" + sx + \" sy=\" + sy);\n\n    let target = transformRect({// seems ok here\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height * headPos\n    }, {\n        x: event.clientX,\n        y: event.clientY\n    }, rect)\n    let vx = transformViewX(target.x - rect.left);\n    let vy = transformViewY(target.y - rect.top);\n\n    if (cDefine.DEBUG_MOUSE_LOG)\n        console.log(\"followPointer onMouseMove device( x:\" + event.clientX + \" y:\" + event.clientY + \" ) view( x:\" + vx + \" y:\" + vy + \")\");\n\n    if (drag)\n    {\n        lastMouseX = sx;\n        lastMouseY = sy;\n        dragMgr.setPoint(vx, vy);\n    }\n}\n\nfunction lookFront()\n{\n    if (drag) {\n        drag = false;\n    }\n    dragMgr.setPoint(0, 0);\n}\n\nfunction mouseEvent(e)\n{\n    //e.preventDefault();\n    if (e.type == \"mousedown\") {\n        modelTapEvent(e);\n    } else if (e.type == \"mousemove\") {\n        modelTurnHead(e);\n    } else if (e.type == \"mouseup\") {\n        if(\"button\" in e && e.button != 0) return;\n        // lookFront();\n    } else if (e.type == \"mouseleave\") {\n        lookFront();\n    }\n}\n\nfunction touchEvent(e)\n{\n    var touch = e.touches[0];\n    if (e.type == \"touchstart\") {\n        if (e.touches.length == 1) modelTapEvent(touch);\n        // onClick(touch);\n    } else if (e.type == \"touchmove\") {\n        followPointer(touch);\n    } else if (e.type == \"touchend\") {\n        lookFront();\n    }\n}\n\nfunction transformViewX(deviceX)\n{\n    var screenX = deviceToScreen.transformX(deviceX);\n    return viewMatrix.invertTransformX(screenX);\n}\n\n\nfunction transformViewY(deviceY)\n{\n    var screenY = deviceToScreen.transformY(deviceY);\n    return viewMatrix.invertTransformY(screenY);\n}\n\n\nfunction transformScreenX(deviceX)\n{\n    return deviceToScreen.transformX(deviceX);\n}\n\n\nfunction transformScreenY(deviceY)\n{\n    return deviceToScreen.transformY(deviceY);\n}\n\nfunction getWebGLContext()\n{\n    var NAMES = [ \"webgl\" , \"experimental-webgl\" , \"webkit-3d\" , \"moz-webgl\"];\n    for( var i = 0; i < NAMES.length; i++ ){\n        try{\n            var ctx = canvas.getContext(NAMES[i], {premultipliedAlpha : true});\n            if(ctx) return ctx;\n        }\n        catch(e){}\n    }\n    return null;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/_cLive2DApp.js"],"sourceRoot":""}